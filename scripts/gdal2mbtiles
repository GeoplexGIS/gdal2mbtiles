#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Quickstart
# ----------
#
# To turn any GDAL-readable file into an MBTiles file, run:
#   $ gdal2mbtiles.py filename.tiff
# This creates a filename.mbtiles that can be served from a TMS service like
# Mapbox.
#
# You can explicitly specify an output filename:
#   $ gdal2mbtiles.py input.tiff output.mbtiles
#
# You can also pipe in any GDAL-readable file:
#   $ cat input.tiff | gdal2mbtiles.py > output.mbtiles

from __future__ import (absolute_import, division, print_function,
                        unicode_literals)


import argparse
from contextlib import contextmanager
import os
from shutil import copyfileobj
import sys
from tempfile import NamedTemporaryFile

from gdal2mbtiles.gdal import RESAMPLING_METHODS, SpatialReference
from gdal2mbtiles.mbtiles import Metadata


def parse_args(args):
    LatestMetadata = Metadata.latest()

    parser = argparse.ArgumentParser(
        description='Converts a GDAL-readable into an MBTiles file'
    )

    group = parser.add_argument_group(title='Positional arguments')
    group.add_argument('INPUT', type=argparse.FileType('rb'), nargs='?',
                       default=sys.stdin,
                       help='GDAL-readable file.')
    group.add_argument('OUTPUT', type=argparse.FileType('wb'), nargs='?',
                       help='Output filename. Defaults to INPUT.mbtiles')

    group = parser.add_argument_group(title='MBTiles metadata arguments')
    group.add_argument('--name', default=None,
                       help=('Human-readable name of the tileset. '
                             'Defaults to INPUT'))
    group.add_argument('--description', default="",
                       help='Description of the layer. Defaults to ""')
    group.add_argument('--layer-type',
                       default=LatestMetadata.TYPES.OVERLAY,
                       choices=LatestMetadata.TYPES,
                       help='Type of layer. Defaults to "overlay"')
    group.add_argument('--version', default='1.0.0',
                       help='Version of the tileset. Defaults to "1.0.0"')
    group.add_argument('--format',
                       default=LatestMetadata.FORMATS.PNG,
                       choices=LatestMetadata.FORMATS,
                       help='Tile image format. Defaults to "png"')

    group = parser.add_argument_group(title='GDAL warp arguments')
    # group.add_argument('--colourize-band', default=1,
    #                    help='Raster band to colourize. Defaults to 1')
    group.add_argument('--spatial-reference', type=int, default=3785,
                       help=('Destination EPSG spatial reference. '
                             'Defaults to 3785'))
    group.add_argument('--resampling',
                       default='near',
                       choices = RESAMPLING_METHODS.values(),
                       help=('Resampling algorithm for warping. '
                             'Defaults to "near" (nearest-neighbour)'))

    group = parser.add_argument_group(title='Rendering agurments')
    group.add_argument('--min-resolution', type=int, default=None,
                       help=('Minimum resolution to render and slice. '
                             'Defaults to None (do not downsample)'))
    group.add_argument('--max-resolution', type=int, default=None,
                       help=('Maximum resolution to render and slice. '
                             'Defaults to None (do not upsample)'))

    args = parser.parse_args(args=args)

    # Guess at the OUTPUT based on the INPUT
    if args.OUTPUT is None:
        if args.INPUT == sys.stdin:
            args.OUTPUT = sys.stdout
        else:
            # Set default output name based on input name
            args.OUTPUT = open(
                os.path.splitext(args.INPUT.name)[0] + '.mbtiles',
                mode='wb'
            )

    if args.name is None:
        args.name = os.path.basename(args.INPUT.name)

    return args


@contextmanager
def input_output(inputfile, outputfile):
    tempfiles = []

    infile = inputfile
    if inputfile == sys.stdin:
        infile = NamedTemporaryFile()
        copyfileobj(inputfile, infile)
        infile.seek(0)
        tempfiles.append(infile)

    outfile = outputfile
    if outputfile == sys.stdout:
        outfile = NamedTemporaryFile()
        tempfiles.append(outfile)

    try:
        yield infile, outfile
        if outputfile == sys.stdout:
            copyfileobj(open(outfile.name, 'rb'), outputfile)
    finally:
        for f in tempfiles:
            f.close()


def main(args):
    args = parse_args(args=args)

    # HACK: Import here, so that VIPS doesn't parse sys.argv!!!
    # In vimagemodule.cxx, SWIG_init actually does argument parsing
    from gdal2mbtiles.helpers import warp_mbtiles

    with input_output(inputfile=args.INPUT,
                      outputfile=args.OUTPUT) as (inputfile, outputfile):
        metadata = dict(
            description=args.description,
            format=args.format,
            name=args.name,
            type=args.layer_type,
            version=args.version,
        )
        spatial_ref = SpatialReference.FromEPSG(args.spatial_reference)
        warp_mbtiles(inputfile=inputfile.name, outputfile=outputfile.name,
                     # MBTiles
                     metadata=metadata,
                     # GDAL
                     spatial_ref=spatial_ref, resampling=args.resampling,
                     # Rendering
                     min_resolution=args.min_resolution,
                     max_resolution=args.max_resolution)
        return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
